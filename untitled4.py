# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UObzIgt_oVv74lkS71JhwChenfXl-6Lh
"""

!pip install pandas

import pandas as pd
as_ = pd.read_csv('/content/drive/MyDrive/diabetes.csv')

as_.head()



import matplotlib.pyplot as plt

fig, ax = plt.subplots()
for Outcome, d in as_.groupby('Outcome'):
    ax.scatter(d['Glucose'], d['BloodPressure'], label=Outcome)

plt.legend()
plt.title('Diabetes')
plt.xlabel('Glucose')
plt.ylabel('BloodPressure')
plt.grid(True)
plt.show()

import numpy as np

x_train = np.array(as_[['Glucose', 'BloodPressure']])
y_train = np.array(as_['Outcome'])

print(f'x_train:\n{x_train}\n')
print(f'y_train: {y_train}')

from sklearn.preprocessing  import LabelBinarizer

lb = LabelBinarizer()
y_train = lb.fit_transform(y_train)
print(f'y_train:\n{y_train}\n')

y_train = y_train.flatten()
print(f'y_train: {y_train}')

from sklearn.neighbors import KNeighborsClassifier

k = 3
model = KNeighborsClassifier(n_neighbors=k)
model.fit(x_train, y_train)

Glucose = 148
BloodPressure = 72

x_new = np.array([Glucose, BloodPressure]).reshape(1, -1)
x_new



y_new = model.predict(x_new)
y_new

lb.inverse_transform(y_new)

"""VISUALISASI DIABETES


"""

fig, ax = plt.subplots()
for Outcome, d in as_.groupby('Outcome'):
    ax.scatter(d['Glucose'], d['BloodPressure'], label=Outcome)

plt.scatter(Glucose,
            BloodPressure,
            color='red',
            marker='s',
            label = 'misterius')

plt.legend(loc='upper left')
plt.title('Diabetes')
plt.xlabel('Glucose')
plt.ylabel('BloodPressure')
plt.grid(True)
plt.show()

misterius = np.array([Glucose, BloodPressure])
misterius

x_train

from scipy.spatial.distance import euclidean

data_jarak = [euclidean(misterius, d) for d in x_train]
data_jarak

as_['jarak'] = data_jarak
as_.sort_values('jarak')

x_test = np.array([[148 , 72], [183, 84], [85, 66], [89, 66]])
y_test = lb.transform(np.array(['1', '1', '0', '0']))

print(f'x_test:\n{x_test}\n')
print(f'y_test:\n{y_test}')

y_pred = model.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_pred)
print(f'Accuracy: {acc}')

from sklearn.metrics import precision_score
prec = precision_score(y_test, y_pred)
print(f'Precision: {prec}')

from sklearn.metrics import recall_score
recall = recall_score(y_test, y_pred)
print(f'Recall: {recall}')

from sklearn.metrics import f1_score
f1 = f1_score(y_test, y_pred)
print(f'F1 Score: {f1}')
#

from sklearn.metrics import classification_report
cls_report = classification_report(y_test, y_pred)
print(f'Classification Report:\n{cls_report}')

from sklearn.metrics import matthews_corrcoef
mcc = matthews_corrcoef(y_test, y_pred)
print(f'MCC: {mcc}')
#